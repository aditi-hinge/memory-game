{"ast":null,"code":"var _jsxFileName = \"/home/aditi/Downloads/TheOdinProject/new/memory-card/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Card from \"./Card\";\nimport luffy from \"../images/luffy.jpg\";\nimport zoro from \"../images/zoro.jpg\";\nimport sanji from \"../images/sanji.jpg\";\nimport chopper from \"../images/chopper.jpg\";\nimport nami from \"../images/nami.jpg\";\nimport robin from \"../images/robin.jpg\";\nimport usopp from \"../images/usopp.jpg\";\nimport brook from \"../images/brook.jpg\";\nimport jinbei from \"../images/jinbei.jpg\";\nimport franky from \"../images/franky.jpg\";\nimport vivi from \"../images/vivi.jpg\";\nimport sabo from \"../images/sabo.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  //make character array\n  const characters = [{\n    name: \"Luffy\",\n    image: luffy,\n    id: 0,\n    isSelected: false\n  }, {\n    name: \"Zoro\",\n    image: zoro,\n    id: 1,\n    isSelected: false\n  }, {\n    name: \"Sanji\",\n    image: sanji,\n    id: 2,\n    isSelected: false\n  }, {\n    name: \"Chopper\",\n    image: chopper,\n    id: 3,\n    isSelected: false\n  }, {\n    name: \"Nami\",\n    image: nami,\n    id: 4,\n    isSelected: false\n  }, {\n    name: \"Robin\",\n    image: robin,\n    id: 5,\n    isSelected: false\n  }, {\n    name: \"Usopp\",\n    image: usopp,\n    id: 6,\n    isSelected: false\n  }, {\n    name: \"Brook\",\n    image: brook,\n    id: 7,\n    isSelected: false\n  }, {\n    name: \"Jinbei\",\n    image: jinbei,\n    id: 8,\n    isSelected: false\n  }, {\n    name: \"Franky\",\n    image: franky,\n    id: 9,\n    isSelected: false\n  }, {\n    name: \"Vivi\",\n    image: vivi,\n    id: 10,\n    isSelected: false\n  }, {\n    name: \"Sabo\",\n    image: sabo,\n    id: 11,\n    isSelected: false\n  }]; // states\n\n  const [currentScore, setCurrentScore] = React.useState(0);\n  const [highScore, setHighScore] = React.useState(0);\n  const [comparisonArray, setComparisonArray] = React.useState([]);\n  console.log(currentScore);\n  const [cards, setCards] = React.useState(characters); //function to add cards to comparison array\n  // if the same card is clicked twice: comparison array get empty\n  // current score and high score updated\n  // game is reset and player alerted.\n  // else the card gets added to comparison array and\n  // score is updated by 1\n\n  function addCardToComparisonArray(name) {\n    if (comparisonArray.includes(name)) {\n      setComparisonArray([]);\n      setCurrentScore(0);\n      gameLostAlert();\n    } else {\n      setComparisonArray([...comparisonArray, name]);\n      setCurrentScore(prevScore => prevScore + 1);\n    }\n  } // function to give an alert message if the game is lost\n\n\n  function gameLostAlert() {\n    alert(\"you lost! please try again!\");\n  } // function to change state of isSelected of the\n  // cards that have been clicked once\n\n\n  function changeIsSelected(id) {\n    setCards(prevCards => prevCards.map(card => {\n      return card.id === id ? { ...card,\n        isSelected: true\n      } : card;\n    }));\n  } // randomize array function\n  // to display cards at random on the screen\n\n\n  function randomizeArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  } //Updating current score and high score in real time\n  // display win message\n\n\n  React.useEffect(() => {\n    //do something\n    if (highScore < currentScore) {\n      setHighScore(currentScore);\n    }\n\n    if (currentScore === 12) {\n      alert(\"congratulations! You WON!!\");\n      setComparisonArray([]);\n      setCurrentScore(0);\n    }\n  }, [currentScore, highScore]);\n  const cardElement = randomizeArray(cards).map(card => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      source: card.image,\n      name: card.name,\n      isSelected: card.isSelected,\n      clickHandle: () => {\n        changeIsSelected(card.id);\n        addCardToComparisonArray(card.name);\n      }\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      currentScore: currentScore,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: cardElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"qF6YiEBC4K3wgiKPASwkSiSbdOQ=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","Header","Footer","Card","luffy","zoro","sanji","chopper","nami","robin","usopp","brook","jinbei","franky","vivi","sabo","Game","characters","name","image","id","isSelected","currentScore","setCurrentScore","useState","highScore","setHighScore","comparisonArray","setComparisonArray","console","log","cards","setCards","addCardToComparisonArray","includes","gameLostAlert","prevScore","alert","changeIsSelected","prevCards","map","card","randomizeArray","array","i","length","j","Math","floor","random","temp","useEffect","cardElement"],"sources":["/home/aditi/Downloads/TheOdinProject/new/memory-card/src/components/Game.js"],"sourcesContent":["import React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Card from \"./Card\";\nimport luffy from \"../images/luffy.jpg\";\nimport zoro from \"../images/zoro.jpg\";\nimport sanji from \"../images/sanji.jpg\";\nimport chopper from \"../images/chopper.jpg\";\nimport nami from \"../images/nami.jpg\";\nimport robin from \"../images/robin.jpg\";\nimport usopp from \"../images/usopp.jpg\";\nimport brook from \"../images/brook.jpg\";\nimport jinbei from \"../images/jinbei.jpg\";\nimport franky from \"../images/franky.jpg\";\nimport vivi from \"../images/vivi.jpg\";\nimport sabo from \"../images/sabo.jpg\";\n\nexport default function Game() {\n  //make character array\n  const characters = [\n    { name: \"Luffy\", image: luffy, id: 0, isSelected: false },\n    { name: \"Zoro\", image: zoro, id: 1, isSelected: false },\n    { name: \"Sanji\", image: sanji, id: 2, isSelected: false },\n    { name: \"Chopper\", image: chopper, id: 3, isSelected: false },\n    { name: \"Nami\", image: nami, id: 4, isSelected: false },\n    { name: \"Robin\", image: robin, id: 5, isSelected: false },\n    { name: \"Usopp\", image: usopp, id: 6, isSelected: false },\n    { name: \"Brook\", image: brook, id: 7, isSelected: false },\n    { name: \"Jinbei\", image: jinbei, id: 8, isSelected: false },\n    { name: \"Franky\", image: franky, id: 9, isSelected: false },\n    { name: \"Vivi\", image: vivi, id: 10, isSelected: false },\n    { name: \"Sabo\", image: sabo, id: 11, isSelected: false }\n  ];\n\n  // states\n  const [currentScore, setCurrentScore] = React.useState(0);\n  const [highScore, setHighScore] = React.useState(0);\n  const [comparisonArray, setComparisonArray] = React.useState([]);\n  console.log(currentScore);\n  const [cards, setCards] = React.useState(characters);\n\n  //function to add cards to comparison array\n  // if the same card is clicked twice: comparison array get empty\n  // current score and high score updated\n  // game is reset and player alerted.\n  // else the card gets added to comparison array and\n  // score is updated by 1\n  function addCardToComparisonArray(name) {\n    if (comparisonArray.includes(name)) {\n      setComparisonArray([]);\n      setCurrentScore(0);\n      gameLostAlert();\n    } else {\n      setComparisonArray([...comparisonArray, name]);\n      setCurrentScore((prevScore) => prevScore + 1);\n    }\n  }\n\n  // function to give an alert message if the game is lost\n  function gameLostAlert() {\n    alert(\"you lost! please try again!\");\n  }\n\n  // function to change state of isSelected of the\n  // cards that have been clicked once\n  function changeIsSelected(id) {\n    setCards((prevCards) =>\n      prevCards.map((card) => {\n        return card.id === id ? { ...card, isSelected: true } : card;\n      })\n    );\n  }\n\n  // randomize array function\n  // to display cards at random on the screen\n  function randomizeArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  //Updating current score and high score in real time\n  // display win message\n  React.useEffect(() => {\n    //do something\n    if (highScore < currentScore) {\n      setHighScore(currentScore);\n    }\n    if (currentScore === 12) {\n      alert(\"congratulations! You WON!!\");\n      setComparisonArray([]);\n      setCurrentScore(0);\n    }\n  }, [currentScore, highScore]);\n\n  const cardElement = randomizeArray(cards).map((card) => {\n    return (\n      <Card\n        source={card.image}\n        name={card.name}\n        key={card.id}\n        isSelected={card.isSelected}\n        clickHandle={() => {\n          changeIsSelected(card.id);\n          addCardToComparisonArray(card.name);\n        }}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <Header currentScore={currentScore} highScore={highScore} />\n      <div className=\"cards-container\">{cardElement}</div>\n      <Footer />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}